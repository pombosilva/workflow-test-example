
 DEV  v3.2.4 /Users/osilva/Documents/test/small-snowflake-f12f

Sourcemap for "/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs" points to missing source files
Sourcemap for "/Users/osilva/Documents/test/workers-sdk/packages/miniflare/dist/src/index.js" points to missing source files
Sourcemap for "/Users/osilva/Documents/test/workers-sdk/packages/wrangler/wrangler-dist/cli.js" points to missing source files
Testing project.ptoject.name in multiple workers <ref *2> TestProject {
  vitest: <ref *1> Vitest {
    version: '3.2.4',
    logger: Logger {
      _clearScreenPending: undefined,
      _highlights: Map(0) {},
      cleanupListeners: [],
      console: [Console [console]],
      ctx: [Circular *1],
      outputStream: [SyncWriteStream],
      errorStream: [SyncWriteStream]
    },
    packageInstaller: VitestPackageInstaller {},
    distPath: '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.pnpm/vitest@3.2.4/node_modules/vitest/dist',
    projects: [ [Circular *2] ],
    configOverride: {},
    coverageProvider: null,
    filenamePattern: undefined,
    runningPromise: Promise { <pending> },
    closingPromise: undefined,
    isCancelling: false,
    coreWorkspaceProject: [Circular *2],
    resolvedProjects: [ [Circular *2] ],
    _browserLastPort: 63315,
    _browserSessions: BrowserSessions { sessions: Map(0) {}, sessionIds: Set(0) {} },
    _cliOptions: { '--': [], color: true },
    reporters: [ [DefaultReporter], [WebSocketReporter] ],
    vitenode: ViteNodeServer {
      fetchPromiseMap: [Object],
      transformPromiseMap: [Object],
      durations: [Object],
      existingOptimizedDeps: Set(0) {},
      fetchCaches: [Object],
      fetchCache: [Map],
      externalizeCache: [Map],
      debugger: undefined,
      server: [Object],
      options: [Object]
    },
    runner: ViteNodeRunner {
      root: '/Users/osilva/Documents/test/small-snowflake-f12f',
      debug: false,
      moduleCache: [ModuleCacheMap [Map]],
      executionStack: [Array],
      performanceNow: [Function: bound now],
      options: [Object]
    },
    _testRun: TestRun { vitest: [Circular *1] },
    isFirstRun: true,
    restartsCount: 1,
    specifications: VitestSpecifications { _cachedSpecs: [Map], vitest: [Circular *1] },
    watcher: VitestWatcher {
      invalidates: Set(0) {},
      changedTests: Set(0) {},
      _onRerun: [Array],
      unregisterWatcher: [Function (anonymous)],
      onChange: [Function: onChange],
      onUnlink: [Function: onUnlink],
      onAdd: [Function: onAdd],
      vitest: [Circular *1]
    },
    pool: {
      name: 'default',
      runTests: [Function: runTests],
      collectTests: [Function: collectTests],
      close: [AsyncFunction: close]
    },
    _config: {
      allowOnly: true,
      isolate: true,
      watch: true,
      globals: false,
      environment: 'node',
      pool: '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs',
      clearMocks: false,
      restoreMocks: false,
      mockReset: false,
      unstubGlobals: false,
      unstubEnvs: false,
      include: [Array],
      exclude: [Array],
      teardownTimeout: 10000,
      forceRerunTriggers: [Array],
      update: false,
      reporters: [Array],
      silent: false,
      hideSkippedTests: false,
      api: [Object],
      ui: false,
      uiBase: '/__vitest__/',
      open: true,
      css: [Object],
      coverage: [Object],
      fakeTimers: [Object],
      maxConcurrency: 5,
      dangerouslyIgnoreUnhandledErrors: false,
      typecheck: [Object],
      slowTestThreshold: 300,
      disableConsoleIntercept: false,
      poolOptions: [Object],
      deps: [Object],
      '--': [],
      color: undefined,
      config: '/Users/osilva/Documents/test/small-snowflake-f12f/vitest.config.ts',
      defines: {},
      root: '/Users/osilva/Documents/test/small-snowflake-f12f',
      mode: 'test',
      project: [],
      provide: {},
      name: '',
      inspector: [Object],
      clearScreen: true,
      fileParallelism: true,
      browser: [Object],
      expect: {},
      setupFiles: [],
      globalSetup: [],
      server: [Object],
      attachmentsDir: '/Users/osilva/Documents/test/small-snowflake-f12f/.vitest-attachments',
      testNamePattern: undefined,
      snapshotOptions: [Object],
      snapshotSerializers: [],
      poolMatchGlobs: [],
      cache: [Object],
      sequence: [Object],
      environmentMatchGlobs: [],
      testTransformMode: {},
      testTimeout: 5000,
      hookTimeout: 10000
    },
    _vite: {
      config: [Object],
      middlewares: [Function],
      httpServer: null,
      watcher: [FSWatcher],
      ws: [Object],
      hot: [Object],
      environments: [Object],
      pluginContainer: [PluginContainer],
      moduleGraph: [Getter/Setter],
      resolvedUrls: null,
      ssrTransform: [Function: ssrTransform],
      transformRequest: [Function: transformRequest],
      warmupRequest: [AsyncFunction: warmupRequest],
      transformIndexHtml: [Function: transformIndexHtml],
      ssrLoadModule: [AsyncFunction: ssrLoadModule],
      ssrFixStacktrace: [Function: ssrFixStacktrace],
      ssrRewriteStacktrace: [Function: ssrRewriteStacktrace],
      reloadModule: [AsyncFunction: reloadModule],
      listen: [AsyncFunction: listen],
      openBrowser: [Function: openBrowser],
      close: [AsyncFunction: close],
      printUrls: [Function: printUrls],
      bindCLIShortcuts: [Function: bindCLIShortcuts],
      restart: [AsyncFunction (anonymous)],
      waitForRequestsIdle: [Function: waitForRequestsIdle],
      _setInternalServer: [Function: _setInternalServer],
      _restartPromise: null,
      _forceOptimizeOnRestart: false,
      _shortcutsOptions: undefined
    },
    _state: StateManager {
      filesMap: Map(0) {},
      pathsSet: [Set],
      idMap: Map(0) {},
      taskFileMap: [WeakMap],
      errorsSet: Set(0) {},
      processTimeoutCauses: Set(0) {},
      reportedTasksMap: [WeakMap],
      blobs: undefined
    },
    _cache: VitestCache { results: [ResultsCache], stats: [FilesStatsCache] },
    _snapshot: SnapshotManager {
      summary: [Object],
      extension: '.snap',
      options: [Object]
    },
    _workspaceConfigPath: undefined,
    _onRestartListeners: [],
    _onClose: [ [Function (anonymous)], [Function (anonymous)] ],
    _onSetServer: [ [Function (anonymous)] ],
    _onCancelListeners: [],
    _onUserTestsRerun: [],
    _onFilterWatchedSpecification: [],
    injectTestProject: [AsyncFunction: injectTestProject],
    provide: [Function: provide],
    _rerunTimer: undefined,
    mode: 'test'
  },
  globalConfig: {
    allowOnly: true,
    isolate: true,
    watch: true,
    globals: false,
    environment: 'node',
    pool: '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs',
    clearMocks: false,
    restoreMocks: false,
    mockReset: false,
    unstubGlobals: false,
    unstubEnvs: false,
    include: [ '**/*.{test,spec}.?(c|m)[jt]s?(x)' ],
    exclude: [
      '**/node_modules/**',
      '**/dist/**',
      '**/cypress/**',
      '**/.{idea,git,cache,output,temp}/**',
      '**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*'
    ],
    teardownTimeout: 10000,
    forceRerunTriggers: [ '**/package.json/**', '**/{vitest,vite}.config.*/**' ],
    update: false,
    reporters: [ [Array] ],
    silent: false,
    hideSkippedTests: false,
    api: {
      middlewareMode: true,
      token: '89f9a66e-5b25-4235-b0eb-36aae935e824'
    },
    ui: false,
    uiBase: '/__vitest__/',
    open: true,
    css: { include: [], modules: [Object] },
    coverage: {
      provider: 'v8',
      enabled: false,
      all: true,
      clean: true,
      cleanOnRerun: true,
      reportsDirectory: './coverage',
      exclude: [Array],
      reportOnFailure: false,
      reporter: [Array],
      extension: [Array],
      allowExternal: false,
      excludeAfterRemap: false,
      ignoreEmptyLines: true,
      processingConcurrency: 12
    },
    fakeTimers: {
      loopLimit: 10000,
      shouldClearNativeTimers: true,
      toFake: undefined
    },
    maxConcurrency: 5,
    dangerouslyIgnoreUnhandledErrors: false,
    typecheck: {
      checker: 'tsc',
      include: [Array],
      exclude: [Array],
      enabled: false
    },
    slowTestThreshold: 300,
    disableConsoleIntercept: false,
    poolOptions: { workers: [Object], threads: [Object], forks: [Object] },
    deps: { optimizer: [Object], moduleDirectories: [Array], web: [Object] },
    '--': [],
    color: undefined,
    config: '/Users/osilva/Documents/test/small-snowflake-f12f/vitest.config.ts',
    defines: {},
    root: '/Users/osilva/Documents/test/small-snowflake-f12f',
    mode: 'test',
    project: [],
    provide: {},
    name: '',
    inspector: { enabled: false, waitForDebugger: false },
    clearScreen: true,
    fileParallelism: true,
    browser: {
      enabled: false,
      headless: false,
      isolate: true,
      fileParallelism: true,
      ui: true,
      screenshotFailures: false,
      viewport: [Object],
      locators: [Object],
      api: [Object]
    },
    expect: {},
    setupFiles: [],
    globalSetup: [],
    server: { deps: [Object] },
    attachmentsDir: '/Users/osilva/Documents/test/small-snowflake-f12f/.vitest-attachments',
    testNamePattern: undefined,
    snapshotOptions: {
      expand: false,
      snapshotFormat: {},
      updateSnapshot: 'new',
      resolveSnapshotPath: undefined,
      snapshotEnvironment: null
    },
    snapshotSerializers: [],
    poolMatchGlobs: [],
    cache: {
      dir: '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.vite/vitest/da39a3ee5e6b4b0d3255bfef95601890afd80709'
    },
    sequence: { sequencer: [class BaseSequencer], groupOrder: 0, hooks: 'stack' },
    environmentMatchGlobs: [],
    testTransformMode: {},
    testTimeout: 5000,
    hookTimeout: 10000
  },
  browser: undefined,
  ctx: <ref *1> Vitest {
    version: '3.2.4',
    logger: Logger {
      _clearScreenPending: undefined,
      _highlights: Map(0) {},
      cleanupListeners: [],
      console: [Console [console]],
      ctx: [Circular *1],
      outputStream: [SyncWriteStream],
      errorStream: [SyncWriteStream]
    },
    packageInstaller: VitestPackageInstaller {},
    distPath: '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.pnpm/vitest@3.2.4/node_modules/vitest/dist',
    projects: [ [Circular *2] ],
    configOverride: {},
    coverageProvider: null,
    filenamePattern: undefined,
    runningPromise: Promise { <pending> },
    closingPromise: undefined,
    isCancelling: false,
    coreWorkspaceProject: [Circular *2],
    resolvedProjects: [ [Circular *2] ],
    _browserLastPort: 63315,
    _browserSessions: BrowserSessions { sessions: Map(0) {}, sessionIds: Set(0) {} },
    _cliOptions: { '--': [], color: true },
    reporters: [ [DefaultReporter], [WebSocketReporter] ],
    vitenode: ViteNodeServer {
      fetchPromiseMap: [Object],
      transformPromiseMap: [Object],
      durations: [Object],
      existingOptimizedDeps: Set(0) {},
      fetchCaches: [Object],
      fetchCache: [Map],
      externalizeCache: [Map],
      debugger: undefined,
      server: [Object],
      options: [Object]
    },
    runner: ViteNodeRunner {
      root: '/Users/osilva/Documents/test/small-snowflake-f12f',
      debug: false,
      moduleCache: [ModuleCacheMap [Map]],
      executionStack: [Array],
      performanceNow: [Function: bound now],
      options: [Object]
    },
    _testRun: TestRun { vitest: [Circular *1] },
    isFirstRun: true,
    restartsCount: 1,
    specifications: VitestSpecifications { _cachedSpecs: [Map], vitest: [Circular *1] },
    watcher: VitestWatcher {
      invalidates: Set(0) {},
      changedTests: Set(0) {},
      _onRerun: [Array],
      unregisterWatcher: [Function (anonymous)],
      onChange: [Function: onChange],
      onUnlink: [Function: onUnlink],
      onAdd: [Function: onAdd],
      vitest: [Circular *1]
    },
    pool: {
      name: 'default',
      runTests: [Function: runTests],
      collectTests: [Function: collectTests],
      close: [AsyncFunction: close]
    },
    _config: {
      allowOnly: true,
      isolate: true,
      watch: true,
      globals: false,
      environment: 'node',
      pool: '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs',
      clearMocks: false,
      restoreMocks: false,
      mockReset: false,
      unstubGlobals: false,
      unstubEnvs: false,
      include: [Array],
      exclude: [Array],
      teardownTimeout: 10000,
      forceRerunTriggers: [Array],
      update: false,
      reporters: [Array],
      silent: false,
      hideSkippedTests: false,
      api: [Object],
      ui: false,
      uiBase: '/__vitest__/',
      open: true,
      css: [Object],
      coverage: [Object],
      fakeTimers: [Object],
      maxConcurrency: 5,
      dangerouslyIgnoreUnhandledErrors: false,
      typecheck: [Object],
      slowTestThreshold: 300,
      disableConsoleIntercept: false,
      poolOptions: [Object],
      deps: [Object],
      '--': [],
      color: undefined,
      config: '/Users/osilva/Documents/test/small-snowflake-f12f/vitest.config.ts',
      defines: {},
      root: '/Users/osilva/Documents/test/small-snowflake-f12f',
      mode: 'test',
      project: [],
      provide: {},
      name: '',
      inspector: [Object],
      clearScreen: true,
      fileParallelism: true,
      browser: [Object],
      expect: {},
      setupFiles: [],
      globalSetup: [],
      server: [Object],
      attachmentsDir: '/Users/osilva/Documents/test/small-snowflake-f12f/.vitest-attachments',
      testNamePattern: undefined,
      snapshotOptions: [Object],
      snapshotSerializers: [],
      poolMatchGlobs: [],
      cache: [Object],
      sequence: [Object],
      environmentMatchGlobs: [],
      testTransformMode: {},
      testTimeout: 5000,
      hookTimeout: 10000
    },
    _vite: {
      config: [Object],
      middlewares: [Function],
      httpServer: null,
      watcher: [FSWatcher],
      ws: [Object],
      hot: [Object],
      environments: [Object],
      pluginContainer: [PluginContainer],
      moduleGraph: [Getter/Setter],
      resolvedUrls: null,
      ssrTransform: [Function: ssrTransform],
      transformRequest: [Function: transformRequest],
      warmupRequest: [AsyncFunction: warmupRequest],
      transformIndexHtml: [Function: transformIndexHtml],
      ssrLoadModule: [AsyncFunction: ssrLoadModule],
      ssrFixStacktrace: [Function: ssrFixStacktrace],
      ssrRewriteStacktrace: [Function: ssrRewriteStacktrace],
      reloadModule: [AsyncFunction: reloadModule],
      listen: [AsyncFunction: listen],
      openBrowser: [Function: openBrowser],
      close: [AsyncFunction: close],
      printUrls: [Function: printUrls],
      bindCLIShortcuts: [Function: bindCLIShortcuts],
      restart: [AsyncFunction (anonymous)],
      waitForRequestsIdle: [Function: waitForRequestsIdle],
      _setInternalServer: [Function: _setInternalServer],
      _restartPromise: null,
      _forceOptimizeOnRestart: false,
      _shortcutsOptions: undefined
    },
    _state: StateManager {
      filesMap: Map(0) {},
      pathsSet: [Set],
      idMap: Map(0) {},
      taskFileMap: [WeakMap],
      errorsSet: Set(0) {},
      processTimeoutCauses: Set(0) {},
      reportedTasksMap: [WeakMap],
      blobs: undefined
    },
    _cache: VitestCache { results: [ResultsCache], stats: [FilesStatsCache] },
    _snapshot: SnapshotManager {
      summary: [Object],
      extension: '.snap',
      options: [Object]
    },
    _workspaceConfigPath: undefined,
    _onRestartListeners: [],
    _onClose: [ [Function (anonymous)], [Function (anonymous)] ],
    _onSetServer: [ [Function (anonymous)] ],
    _onCancelListeners: [],
    _onUserTestsRerun: [],
    _onFilterWatchedSpecification: [],
    injectTestProject: [AsyncFunction: injectTestProject],
    provide: [Function: provide],
    _rerunTimer: undefined,
    mode: 'test'
  },
  tmpDir: '/var/folders/0n/pp98xwp51hdfj1jxh9xjqmkw0000gn/T/J5Mp4Uf-DrOdCKwmpReqz',
  vitenode: ViteNodeServer {
    fetchPromiseMap: { ssr: Map(0) {}, web: Map(0) {} },
    transformPromiseMap: { ssr: Map(0) {}, web: Map(0) {} },
    durations: { ssr: [Map], web: [Map] },
    existingOptimizedDeps: Set(0) {},
    fetchCaches: { ssr: [Map], web: [Map] },
    fetchCache: Map(20) {
      '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs' => [Object],
      'assert' => [Object],
      'crypto' => [Object],
      'events' => [Object],
      'fs' => [Object],
      'path' => [Object],
      'url' => [Object],
      'util' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/birpc@0.2.14/node_modules/birpc/dist/index.mjs' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/devalue@4.3.2/node_modules/devalue/index.js' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/packages/miniflare/dist/src/index.js' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/satisfies.js' => [Object],
      '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.pnpm/vitest@3.2.4/node_modules/vitest/dist/node.js' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/packages/wrangler/wrangler-dist/cli.js' => [Object],
      'buffer' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/index.mjs' => [Object],
      'fs/promises' => [Object],
      'module' => [Object],
      'path/posix' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/cjs-module-lexer@1.2.3/node_modules/cjs-module-lexer/dist/lexer.mjs' => [Object]
    },
    externalizeCache: Map(20) {
      '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs' => [Promise],
      'assert' => [Promise],
      'crypto' => [Promise],
      'events' => [Promise],
      'fs' => [Promise],
      'path' => [Promise],
      'url' => [Promise],
      'util' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/birpc@0.2.14/node_modules/birpc/dist/index.mjs' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/devalue@4.3.2/node_modules/devalue/index.js' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/packages/miniflare/dist/src/index.js' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/satisfies.js' => [Promise],
      '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.pnpm/vitest@3.2.4/node_modules/vitest/dist/node.js' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/packages/wrangler/wrangler-dist/cli.js' => [Promise],
      'buffer' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/index.mjs' => [Promise],
      'fs/promises' => [Promise],
      'module' => [Promise],
      'path/posix' => [Promise],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/cjs-module-lexer@1.2.3/node_modules/cjs-module-lexer/dist/lexer.mjs' => [Promise]
    },
    debugger: undefined,
    server: {
      config: [Object],
      middlewares: [Function],
      httpServer: null,
      watcher: [FSWatcher],
      ws: [Object],
      hot: [Object],
      environments: [Object],
      pluginContainer: [PluginContainer],
      moduleGraph: [Getter/Setter],
      resolvedUrls: null,
      ssrTransform: [Function: ssrTransform],
      transformRequest: [Function: transformRequest],
      warmupRequest: [AsyncFunction: warmupRequest],
      transformIndexHtml: [Function: transformIndexHtml],
      ssrLoadModule: [AsyncFunction: ssrLoadModule],
      ssrFixStacktrace: [Function: ssrFixStacktrace],
      ssrRewriteStacktrace: [Function: ssrRewriteStacktrace],
      reloadModule: [AsyncFunction: reloadModule],
      listen: [AsyncFunction: listen],
      openBrowser: [Function: openBrowser],
      close: [AsyncFunction: close],
      printUrls: [Function: printUrls],
      bindCLIShortcuts: [Function: bindCLIShortcuts],
      restart: [AsyncFunction (anonymous)],
      waitForRequestsIdle: [Function: waitForRequestsIdle],
      _setInternalServer: [Function: _setInternalServer],
      _restartPromise: null,
      _forceOptimizeOnRestart: false,
      _shortcutsOptions: undefined
    },
    options: { deps: [Object] }
  },
  typechecker: undefined,
  _config: {
    allowOnly: true,
    isolate: true,
    watch: true,
    globals: false,
    environment: 'node',
    pool: '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs',
    clearMocks: false,
    restoreMocks: false,
    mockReset: false,
    unstubGlobals: false,
    unstubEnvs: false,
    include: [ '**/*.{test,spec}.?(c|m)[jt]s?(x)' ],
    exclude: [
      '**/node_modules/**',
      '**/dist/**',
      '**/cypress/**',
      '**/.{idea,git,cache,output,temp}/**',
      '**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*'
    ],
    teardownTimeout: 10000,
    forceRerunTriggers: [ '**/package.json/**', '**/{vitest,vite}.config.*/**' ],
    update: false,
    reporters: [ [Array] ],
    silent: false,
    hideSkippedTests: false,
    api: {
      middlewareMode: true,
      token: '89f9a66e-5b25-4235-b0eb-36aae935e824'
    },
    ui: false,
    uiBase: '/__vitest__/',
    open: true,
    css: { include: [], modules: [Object] },
    coverage: {
      provider: 'v8',
      enabled: false,
      all: true,
      clean: true,
      cleanOnRerun: true,
      reportsDirectory: './coverage',
      exclude: [Array],
      reportOnFailure: false,
      reporter: [Array],
      extension: [Array],
      allowExternal: false,
      excludeAfterRemap: false,
      ignoreEmptyLines: true,
      processingConcurrency: 12
    },
    fakeTimers: {
      loopLimit: 10000,
      shouldClearNativeTimers: true,
      toFake: undefined
    },
    maxConcurrency: 5,
    dangerouslyIgnoreUnhandledErrors: false,
    typecheck: {
      checker: 'tsc',
      include: [Array],
      exclude: [Array],
      enabled: false
    },
    slowTestThreshold: 300,
    disableConsoleIntercept: false,
    poolOptions: { workers: [Object], threads: [Object], forks: [Object] },
    deps: { optimizer: [Object], moduleDirectories: [Array], web: [Object] },
    '--': [],
    color: undefined,
    config: '/Users/osilva/Documents/test/small-snowflake-f12f/vitest.config.ts',
    defines: {},
    root: '/Users/osilva/Documents/test/small-snowflake-f12f',
    mode: 'test',
    project: [],
    provide: {},
    name: '',
    inspector: { enabled: false, waitForDebugger: false },
    clearScreen: true,
    fileParallelism: true,
    browser: {
      enabled: false,
      headless: false,
      isolate: true,
      fileParallelism: true,
      ui: true,
      screenshotFailures: false,
      viewport: [Object],
      locators: [Object],
      api: [Object]
    },
    expect: {},
    setupFiles: [],
    globalSetup: [],
    server: { deps: [Object] },
    attachmentsDir: '/Users/osilva/Documents/test/small-snowflake-f12f/.vitest-attachments',
    testNamePattern: undefined,
    snapshotOptions: {
      expand: false,
      snapshotFormat: {},
      updateSnapshot: 'new',
      resolveSnapshotPath: undefined,
      snapshotEnvironment: null
    },
    snapshotSerializers: [],
    poolMatchGlobs: [],
    cache: {
      dir: '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.vite/vitest/da39a3ee5e6b4b0d3255bfef95601890afd80709'
    },
    sequence: { sequencer: [class BaseSequencer], groupOrder: 0, hooks: 'stack' },
    environmentMatchGlobs: [],
    testTransformMode: {},
    testTimeout: 5000,
    hookTimeout: 10000
  },
  _vite: {
    config: {
      test: [Object],
      plugins: [Array],
      configFile: '/Users/osilva/Documents/test/small-snowflake-f12f/vitest.config.ts',
      mode: 'test',
      define: [Object],
      esbuild: [Object],
      resolve: [Object],
      server: [Object],
      build: [Object],
      environments: [Object],
      customLogger: [Object],
      ssr: [Object],
      css: [Object],
      cacheDir: '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.vite/vitest/da39a3ee5e6b4b0d3255bfef95601890afd80709',
      optimizeDeps: [Object],
      configFileDependencies: [Array],
      inlineConfig: [Object],
      root: '/Users/osilva/Documents/test/small-snowflake-f12f',
      base: '/',
      decodedBase: '/',
      rawBase: '/',
      publicDir: '/Users/osilva/Documents/test/small-snowflake-f12f/public',
      command: 'serve',
      isWorker: false,
      mainConfig: null,
      bundleChain: [],
      isProduction: false,
      json: [Object],
      builder: undefined,
      preview: [Object],
      envDir: '/Users/osilva/Documents/test/small-snowflake-f12f',
      env: [Object],
      assetsInclude: [Function: assetsInclude],
      logger: [Object],
      packageCache: [Map],
      worker: [Object],
      appType: 'spa',
      experimental: [Object],
      future: undefined,
      dev: [Object],
      webSocketToken: 'D8RsKk5KPZMj',
      getSortedPlugins: [Function: getSortedPlugins],
      getSortedPluginHooks: [Function: getSortedPluginHooks],
      createResolver: [Function: createResolver],
      fsDenyGlob: [Function: arrayMatcher],
      safeModulePaths: [Set],
      Symbol(vite:resolved-config): true
    },
    middlewares: [Function: app] {
      use: [Function: use],
      handle: [Function: handle],
      listen: [Function: listen],
      _events: undefined,
      _eventsCount: 0,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      route: '/',
      stack: [Array]
    },
    httpServer: null,
    watcher: FSWatcher {
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _watched: [Map],
      _closers: [Map],
      _ignoredPaths: Set(0) {},
      _throttled: Map(0) {},
      _symlinkPaths: Map(0) {},
      _streams: Set(0) {},
      closed: false,
      _emitReady: [Function (anonymous)],
      _emitRaw: [Function (anonymous)],
      _readyEmitted: true,
      options: [Object],
      _fsEventsHandler: [FsEventsHandler$1],
      _userIgnored: [Function (anonymous)],
      _readyCount: 22,
      _boundRemove: [Function: bound _remove],
      Symbol(shapeMode): false,
      Symbol(kCapture): false
    },
    ws: {
      clients: [Getter],
      close: [AsyncFunction: close],
      on: [Function: noop$2],
      off: [Function: noop$2],
      setInvokeHandler: [Function: noop$2],
      handleInvoke: [AsyncFunction: handleInvoke],
      listen: [Function: noop$2],
      send: [Function: noop$2],
      Symbol(isWebSocketServer): true
    },
    hot: {
      clients: [Getter],
      close: [AsyncFunction: close],
      on: [Function: noop$2],
      off: [Function: noop$2],
      setInvokeHandler: [Function: noop$2],
      handleInvoke: [AsyncFunction: handleInvoke],
      listen: [Function: noop$2],
      send: [Function: noop$2],
      Symbol(isWebSocketServer): true
    },
    environments: { client: [DevEnvironment], ssr: [RunnableDevEnvironment] },
    pluginContainer: PluginContainer { environments: [Object] },
    moduleGraph: [Getter/Setter],
    resolvedUrls: null,
    ssrTransform: [Function: ssrTransform],
    transformRequest: [Function: transformRequest],
    warmupRequest: [AsyncFunction: warmupRequest],
    transformIndexHtml: [Function: transformIndexHtml],
    ssrLoadModule: [AsyncFunction: ssrLoadModule],
    ssrFixStacktrace: [Function: ssrFixStacktrace],
    ssrRewriteStacktrace: [Function: ssrRewriteStacktrace],
    reloadModule: [AsyncFunction: reloadModule],
    listen: [AsyncFunction: listen],
    openBrowser: [Function: openBrowser],
    close: [AsyncFunction: close],
    printUrls: [Function: printUrls],
    bindCLIShortcuts: [Function: bindCLIShortcuts],
    restart: [AsyncFunction (anonymous)],
    waitForRequestsIdle: [Function: waitForRequestsIdle],
    _setInternalServer: [Function: _setInternalServer],
    _restartPromise: null,
    _forceOptimizeOnRestart: false,
    _shortcutsOptions: undefined
  },
  _hash: '-2058258401',
  runner: ViteNodeRunner {
    root: '/Users/osilva/Documents/test/small-snowflake-f12f',
    debug: false,
    moduleCache: ModuleCacheMap(31) [Map] {
      '/Users/osilva/Documents/test/workers-sdk/packages/vitest-pool-workers/dist/pool/index.mjs' => [Object],
      'node:assert' => [Object],
      'assert' => [Object],
      'node:crypto' => [Object],
      'crypto' => [Object],
      'node:events' => [Object],
      'events' => [Object],
      'node:fs' => [Object],
      'fs' => [Object],
      'node:path' => [Object],
      'path' => [Object],
      'node:url' => [Object],
      'url' => [Object],
      'node:util' => [Object],
      'util' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/birpc@0.2.14/node_modules/birpc/dist/index.mjs' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/devalue@4.3.2/node_modules/devalue/index.js' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/packages/miniflare/dist/src/index.js' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/satisfies.js' => [Object],
      '/Users/osilva/Documents/test/small-snowflake-f12f/node_modules/.pnpm/vitest@3.2.4/node_modules/vitest/dist/node.js' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/packages/wrangler/wrangler-dist/cli.js' => [Object],
      'node:buffer' => [Object],
      'buffer' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/index.mjs' => [Object],
      'node:fs/promises' => [Object],
      'fs/promises' => [Object],
      'node:module' => [Object],
      'module' => [Object],
      'node:path/posix' => [Object],
      'path/posix' => [Object],
      '/Users/osilva/Documents/test/workers-sdk/node_modules/.pnpm/cjs-module-lexer@1.2.3/node_modules/cjs-module-lexer/dist/lexer.mjs' => [Object]
    },
    executionStack: [ [Object], [Object], [Object] ],
    performanceNow: [Function: bound now],
    options: {
      root: '/Users/osilva/Documents/test/small-snowflake-f12f',
      base: '/',
      fetchModule: [Function: fetchModule],
      resolveId: [Function: resolveId]
    }
  },
  closingPromise: undefined,
  testFilesList: [
    '/Users/osilva/Documents/test/small-snowflake-f12f/test/index.test.ts'
  ],
  typecheckFilesList: [],
  _globalSetups: [],
  _provided: {},
  provide: [Function: provide],
  _parentBrowser: undefined,
  _parent: undefined,
  _initParentBrowser: [Function (anonymous)],
  _initBrowserServer: [Function (anonymous)],
  _initBrowserProvider: [Function (anonymous)],
  path: '/Users/osilva/Documents/test/small-snowflake-f12f',
  options: undefined
}
Trying to delete the scriptname from workflows
Multiple workers {
  MY_WORKFLOW: {
    name: 'workflows-hello-world',
    className: '__VITEST_POOL_WORKERS_USER_OBJECTMyWorkflow'
  }
}
[vpw:info] Starting single runtime for vitest.config.ts...
 ✓ test/index.test.ts (1 test) 1ms

 Test Files  1 passed (1)
      Tests  1 passed (1)
   Start at  10:52:41
   Duration  3.13s (transform 2.38s, setup 0ms, collect 8ms, tests 1ms, environment 0ms, prepare 86ms)

 PASS  Waiting for file changes...
       press h to show help, press q to quit
[vpw:debug] Shutting down runtimes...
